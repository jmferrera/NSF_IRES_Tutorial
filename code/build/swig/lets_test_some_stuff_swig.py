# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lets_test_some_stuff_swig', [dirname(__file__)])
        except ImportError:
            import _lets_test_some_stuff_swig
            return _lets_test_some_stuff_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_lets_test_some_stuff_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lets_test_some_stuff_swig = swig_import_helper()
    del swig_import_helper
else:
    import _lets_test_some_stuff_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _lets_test_some_stuff_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _lets_test_some_stuff_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _lets_test_some_stuff_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _lets_test_some_stuff_swig.high_res_timer_epoch()
class taggedFileSource(object):
    """Read stream from file."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(itemsize, filename, repeat=False, blockLength=0):
        """
        make(size_t itemsize, char const * filename, bool repeat=False, int blockLength=0) -> taggedFileSource_sptr

        Create a file source.

        Opens  as a source of items into a flowgraph. The data is expected to be in binary format, item after item. The  of the block determines the conversion from bits to items.

        If  is turned on, the file will repeat the file after it's reached the end.

        Params: (itemsize, filename, repeat, blockLength)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_make(itemsize, filename, repeat, blockLength)

    make = staticmethod(make)

    def seek(self, seek_point, whence):
        """
        seek(taggedFileSource self, long seek_point, int whence) -> bool

        seek file to  relative to

        Params: (seek_point, whence)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_seek(self, seek_point, whence)


    def open(self, filename, repeat):
        """
        open(taggedFileSource self, char const * filename, bool repeat)

        Opens a new file.

        Params: (filename, repeat)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_open(self, filename, repeat)


    def close(self):
        """
        close(taggedFileSource self)

        Close the file handle.

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_close(self)

    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedFileSource
    __del__ = lambda self: None
taggedFileSource_swigregister = _lets_test_some_stuff_swig.taggedFileSource_swigregister
taggedFileSource_swigregister(taggedFileSource)

def taggedFileSource_make(itemsize, filename, repeat=False, blockLength=0):
    """
    taggedFileSource_make(size_t itemsize, char const * filename, bool repeat=False, int blockLength=0) -> taggedFileSource_sptr

    Create a file source.

    Opens  as a source of items into a flowgraph. The data is expected to be in binary format, item after item. The  of the block determines the conversion from bits to items.

    If  is turned on, the file will repeat the file after it's reached the end.

    Params: (itemsize, filename, repeat, blockLength)
    """
    return _lets_test_some_stuff_swig.taggedFileSource_make(itemsize, filename, repeat, blockLength)

class taggedFileSource_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lets_test_some_stuff::taggedFileSource)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedFileSource)> self) -> taggedFileSource_sptr
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedFileSource)> self, taggedFileSource p) -> taggedFileSource_sptr
        """
        this = _lets_test_some_stuff_swig.new_taggedFileSource_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(taggedFileSource_sptr self) -> taggedFileSource"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr___deref__(self)

    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedFileSource_sptr
    __del__ = lambda self: None

    def make(self, itemsize, filename, repeat=False, blockLength=0):
        """
        make(taggedFileSource_sptr self, size_t itemsize, char const * filename, bool repeat=False, int blockLength=0) -> taggedFileSource_sptr

        Create a file source.

        Opens  as a source of items into a flowgraph. The data is expected to be in binary format, item after item. The  of the block determines the conversion from bits to items.

        If  is turned on, the file will repeat the file after it's reached the end.

        Params: (itemsize, filename, repeat, blockLength)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_make(self, itemsize, filename, repeat, blockLength)


    def seek(self, seek_point, whence):
        """
        seek(taggedFileSource_sptr self, long seek_point, int whence) -> bool

        seek file to  relative to

        Params: (seek_point, whence)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_seek(self, seek_point, whence)


    def open(self, filename, repeat):
        """
        open(taggedFileSource_sptr self, char const * filename, bool repeat)

        Opens a new file.

        Params: (filename, repeat)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_open(self, filename, repeat)


    def close(self):
        """
        close(taggedFileSource_sptr self)

        Close the file handle.

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_close(self)


    def history(self):
        """history(taggedFileSource_sptr self) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(taggedFileSource_sptr self, int which, int delay)
        declare_sample_delay(taggedFileSource_sptr self, unsigned int delay)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(taggedFileSource_sptr self, int which) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(taggedFileSource_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(taggedFileSource_sptr self) -> double"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_relative_rate(self)


    def start(self):
        """start(taggedFileSource_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_start(self)


    def stop(self):
        """stop(taggedFileSource_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(taggedFileSource_sptr self, unsigned int which_input) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(taggedFileSource_sptr self, unsigned int which_output) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(taggedFileSource_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(taggedFileSource_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(taggedFileSource_sptr self)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(taggedFileSource_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(taggedFileSource_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(taggedFileSource_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(taggedFileSource_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(taggedFileSource_sptr self, long max_output_buffer)
        set_max_output_buffer(taggedFileSource_sptr self, int port, long max_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(taggedFileSource_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(taggedFileSource_sptr self, long min_output_buffer)
        set_min_output_buffer(taggedFileSource_sptr self, int port, long min_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(taggedFileSource_sptr self, int which) -> float
        pc_input_buffers_full(taggedFileSource_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(taggedFileSource_sptr self, int which) -> float
        pc_input_buffers_full_avg(taggedFileSource_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(taggedFileSource_sptr self, int which) -> float
        pc_input_buffers_full_var(taggedFileSource_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(taggedFileSource_sptr self, int which) -> float
        pc_output_buffers_full(taggedFileSource_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(taggedFileSource_sptr self, int which) -> float
        pc_output_buffers_full_avg(taggedFileSource_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(taggedFileSource_sptr self, int which) -> float
        pc_output_buffers_full_var(taggedFileSource_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(taggedFileSource_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(taggedFileSource_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(taggedFileSource_sptr self)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(taggedFileSource_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(taggedFileSource_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(taggedFileSource_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(taggedFileSource_sptr self, int priority) -> int"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(taggedFileSource_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_name(self)


    def symbol_name(self):
        """symbol_name(taggedFileSource_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(taggedFileSource_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(taggedFileSource_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(taggedFileSource_sptr self) -> long"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(taggedFileSource_sptr self) -> basic_block_sptr"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(taggedFileSource_sptr self, int ninputs, int noutputs) -> bool"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(taggedFileSource_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(taggedFileSource_sptr self, std::string name)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(taggedFileSource_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(taggedFileSource_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(taggedFileSource_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(taggedFileSource_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedFileSource_sptr_message_subscribers(self, which_port)

taggedFileSource_sptr_swigregister = _lets_test_some_stuff_swig.taggedFileSource_sptr_swigregister
taggedFileSource_sptr_swigregister(taggedFileSource_sptr)


taggedFileSource_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
taggedFileSource = taggedFileSource.make;

class taggedHeader(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> taggedHeader_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedHeader.

        Appends a header to a stream of data

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedHeader_make()

    make = staticmethod(make)
    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedHeader
    __del__ = lambda self: None
taggedHeader_swigregister = _lets_test_some_stuff_swig.taggedHeader_swigregister
taggedHeader_swigregister(taggedHeader)

def taggedHeader_make():
    """
    taggedHeader_make() -> taggedHeader_sptr

    Return a shared_ptr to a new instance of lets_test_some_stuff::taggedHeader.

    Appends a header to a stream of data

    Params: (NONE)
    """
    return _lets_test_some_stuff_swig.taggedHeader_make()

class taggedHeader_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lets_test_some_stuff::taggedHeader)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedHeader)> self) -> taggedHeader_sptr
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedHeader)> self, taggedHeader p) -> taggedHeader_sptr
        """
        this = _lets_test_some_stuff_swig.new_taggedHeader_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(taggedHeader_sptr self) -> taggedHeader"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr___deref__(self)

    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedHeader_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(taggedHeader_sptr self) -> taggedHeader_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedHeader.

        Appends a header to a stream of data

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_make(self)


    def history(self):
        """history(taggedHeader_sptr self) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(taggedHeader_sptr self, int which, int delay)
        declare_sample_delay(taggedHeader_sptr self, unsigned int delay)
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(taggedHeader_sptr self, int which) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(taggedHeader_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(taggedHeader_sptr self) -> double"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_relative_rate(self)


    def start(self):
        """start(taggedHeader_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_start(self)


    def stop(self):
        """stop(taggedHeader_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(taggedHeader_sptr self, unsigned int which_input) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(taggedHeader_sptr self, unsigned int which_output) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(taggedHeader_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(taggedHeader_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(taggedHeader_sptr self)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(taggedHeader_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(taggedHeader_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(taggedHeader_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(taggedHeader_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(taggedHeader_sptr self, long max_output_buffer)
        set_max_output_buffer(taggedHeader_sptr self, int port, long max_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(taggedHeader_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(taggedHeader_sptr self, long min_output_buffer)
        set_min_output_buffer(taggedHeader_sptr self, int port, long min_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(taggedHeader_sptr self, int which) -> float
        pc_input_buffers_full(taggedHeader_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(taggedHeader_sptr self, int which) -> float
        pc_input_buffers_full_avg(taggedHeader_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(taggedHeader_sptr self, int which) -> float
        pc_input_buffers_full_var(taggedHeader_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(taggedHeader_sptr self, int which) -> float
        pc_output_buffers_full(taggedHeader_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(taggedHeader_sptr self, int which) -> float
        pc_output_buffers_full_avg(taggedHeader_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(taggedHeader_sptr self, int which) -> float
        pc_output_buffers_full_var(taggedHeader_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(taggedHeader_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(taggedHeader_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(taggedHeader_sptr self)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(taggedHeader_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(taggedHeader_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(taggedHeader_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(taggedHeader_sptr self, int priority) -> int"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(taggedHeader_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_name(self)


    def symbol_name(self):
        """symbol_name(taggedHeader_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(taggedHeader_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(taggedHeader_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(taggedHeader_sptr self) -> long"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(taggedHeader_sptr self) -> basic_block_sptr"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(taggedHeader_sptr self, int ninputs, int noutputs) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(taggedHeader_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(taggedHeader_sptr self, std::string name)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(taggedHeader_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(taggedHeader_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(taggedHeader_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(taggedHeader_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedHeader_sptr_message_subscribers(self, which_port)

taggedHeader_sptr_swigregister = _lets_test_some_stuff_swig.taggedHeader_sptr_swigregister
taggedHeader_sptr_swigregister(taggedHeader_sptr)


taggedHeader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
taggedHeader = taggedHeader.make;

class taggedHeaderParser(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> taggedHeaderParser_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedHeaderParser.

        Appends a header to a stream of data

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_make()

    make = staticmethod(make)
    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedHeaderParser
    __del__ = lambda self: None
taggedHeaderParser_swigregister = _lets_test_some_stuff_swig.taggedHeaderParser_swigregister
taggedHeaderParser_swigregister(taggedHeaderParser)

def taggedHeaderParser_make():
    """
    taggedHeaderParser_make() -> taggedHeaderParser_sptr

    Return a shared_ptr to a new instance of lets_test_some_stuff::taggedHeaderParser.

    Appends a header to a stream of data

    Params: (NONE)
    """
    return _lets_test_some_stuff_swig.taggedHeaderParser_make()

class taggedHeaderParser_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lets_test_some_stuff::taggedHeaderParser)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedHeaderParser)> self) -> taggedHeaderParser_sptr
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedHeaderParser)> self, taggedHeaderParser p) -> taggedHeaderParser_sptr
        """
        this = _lets_test_some_stuff_swig.new_taggedHeaderParser_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(taggedHeaderParser_sptr self) -> taggedHeaderParser"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr___deref__(self)

    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedHeaderParser_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(taggedHeaderParser_sptr self) -> taggedHeaderParser_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedHeaderParser.

        Appends a header to a stream of data

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_make(self)


    def history(self):
        """history(taggedHeaderParser_sptr self) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(taggedHeaderParser_sptr self, int which, int delay)
        declare_sample_delay(taggedHeaderParser_sptr self, unsigned int delay)
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(taggedHeaderParser_sptr self, int which) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(taggedHeaderParser_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(taggedHeaderParser_sptr self) -> double"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_relative_rate(self)


    def start(self):
        """start(taggedHeaderParser_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_start(self)


    def stop(self):
        """stop(taggedHeaderParser_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(taggedHeaderParser_sptr self, unsigned int which_input) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(taggedHeaderParser_sptr self, unsigned int which_output) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(taggedHeaderParser_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(taggedHeaderParser_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(taggedHeaderParser_sptr self)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(taggedHeaderParser_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(taggedHeaderParser_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(taggedHeaderParser_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(taggedHeaderParser_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(taggedHeaderParser_sptr self, long max_output_buffer)
        set_max_output_buffer(taggedHeaderParser_sptr self, int port, long max_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(taggedHeaderParser_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(taggedHeaderParser_sptr self, long min_output_buffer)
        set_min_output_buffer(taggedHeaderParser_sptr self, int port, long min_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(taggedHeaderParser_sptr self, int which) -> float
        pc_input_buffers_full(taggedHeaderParser_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(taggedHeaderParser_sptr self, int which) -> float
        pc_input_buffers_full_avg(taggedHeaderParser_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(taggedHeaderParser_sptr self, int which) -> float
        pc_input_buffers_full_var(taggedHeaderParser_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(taggedHeaderParser_sptr self, int which) -> float
        pc_output_buffers_full(taggedHeaderParser_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(taggedHeaderParser_sptr self, int which) -> float
        pc_output_buffers_full_avg(taggedHeaderParser_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(taggedHeaderParser_sptr self, int which) -> float
        pc_output_buffers_full_var(taggedHeaderParser_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(taggedHeaderParser_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(taggedHeaderParser_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(taggedHeaderParser_sptr self)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(taggedHeaderParser_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(taggedHeaderParser_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(taggedHeaderParser_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(taggedHeaderParser_sptr self, int priority) -> int"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(taggedHeaderParser_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_name(self)


    def symbol_name(self):
        """symbol_name(taggedHeaderParser_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(taggedHeaderParser_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(taggedHeaderParser_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(taggedHeaderParser_sptr self) -> long"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(taggedHeaderParser_sptr self) -> basic_block_sptr"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(taggedHeaderParser_sptr self, int ninputs, int noutputs) -> bool"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(taggedHeaderParser_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(taggedHeaderParser_sptr self, std::string name)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(taggedHeaderParser_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(taggedHeaderParser_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(taggedHeaderParser_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(taggedHeaderParser_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedHeaderParser_sptr_message_subscribers(self, which_port)

taggedHeaderParser_sptr_swigregister = _lets_test_some_stuff_swig.taggedHeaderParser_sptr_swigregister
taggedHeaderParser_sptr_swigregister(taggedHeaderParser_sptr)


taggedHeaderParser_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
taggedHeaderParser = taggedHeaderParser.make;

class taggedAccessCode(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> taggedAccessCode_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedAccessCode.

        To avoid accidental use of raw pointers, lets_test_some_stuff::taggedAccessCode's constructor is in a private implementation class. lets_test_some_stuff::taggedAccessCode::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_make()

    make = staticmethod(make)
    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedAccessCode
    __del__ = lambda self: None
taggedAccessCode_swigregister = _lets_test_some_stuff_swig.taggedAccessCode_swigregister
taggedAccessCode_swigregister(taggedAccessCode)

def taggedAccessCode_make():
    """
    taggedAccessCode_make() -> taggedAccessCode_sptr

    Return a shared_ptr to a new instance of lets_test_some_stuff::taggedAccessCode.

    To avoid accidental use of raw pointers, lets_test_some_stuff::taggedAccessCode's constructor is in a private implementation class. lets_test_some_stuff::taggedAccessCode::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _lets_test_some_stuff_swig.taggedAccessCode_make()

class taggedAccessCode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lets_test_some_stuff::taggedAccessCode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedAccessCode)> self) -> taggedAccessCode_sptr
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedAccessCode)> self, taggedAccessCode p) -> taggedAccessCode_sptr
        """
        this = _lets_test_some_stuff_swig.new_taggedAccessCode_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(taggedAccessCode_sptr self) -> taggedAccessCode"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr___deref__(self)

    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedAccessCode_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(taggedAccessCode_sptr self) -> taggedAccessCode_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedAccessCode.

        To avoid accidental use of raw pointers, lets_test_some_stuff::taggedAccessCode's constructor is in a private implementation class. lets_test_some_stuff::taggedAccessCode::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_make(self)


    def history(self):
        """history(taggedAccessCode_sptr self) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(taggedAccessCode_sptr self, int which, int delay)
        declare_sample_delay(taggedAccessCode_sptr self, unsigned int delay)
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(taggedAccessCode_sptr self, int which) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(taggedAccessCode_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(taggedAccessCode_sptr self) -> double"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_relative_rate(self)


    def start(self):
        """start(taggedAccessCode_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_start(self)


    def stop(self):
        """stop(taggedAccessCode_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(taggedAccessCode_sptr self, unsigned int which_input) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(taggedAccessCode_sptr self, unsigned int which_output) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(taggedAccessCode_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(taggedAccessCode_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(taggedAccessCode_sptr self)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(taggedAccessCode_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(taggedAccessCode_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(taggedAccessCode_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(taggedAccessCode_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(taggedAccessCode_sptr self, long max_output_buffer)
        set_max_output_buffer(taggedAccessCode_sptr self, int port, long max_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(taggedAccessCode_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(taggedAccessCode_sptr self, long min_output_buffer)
        set_min_output_buffer(taggedAccessCode_sptr self, int port, long min_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(taggedAccessCode_sptr self, int which) -> float
        pc_input_buffers_full(taggedAccessCode_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(taggedAccessCode_sptr self, int which) -> float
        pc_input_buffers_full_avg(taggedAccessCode_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(taggedAccessCode_sptr self, int which) -> float
        pc_input_buffers_full_var(taggedAccessCode_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(taggedAccessCode_sptr self, int which) -> float
        pc_output_buffers_full(taggedAccessCode_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(taggedAccessCode_sptr self, int which) -> float
        pc_output_buffers_full_avg(taggedAccessCode_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(taggedAccessCode_sptr self, int which) -> float
        pc_output_buffers_full_var(taggedAccessCode_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(taggedAccessCode_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(taggedAccessCode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(taggedAccessCode_sptr self)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(taggedAccessCode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(taggedAccessCode_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(taggedAccessCode_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(taggedAccessCode_sptr self, int priority) -> int"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(taggedAccessCode_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(taggedAccessCode_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(taggedAccessCode_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(taggedAccessCode_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(taggedAccessCode_sptr self) -> long"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(taggedAccessCode_sptr self) -> basic_block_sptr"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(taggedAccessCode_sptr self, int ninputs, int noutputs) -> bool"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(taggedAccessCode_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(taggedAccessCode_sptr self, std::string name)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(taggedAccessCode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(taggedAccessCode_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(taggedAccessCode_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(taggedAccessCode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedAccessCode_sptr_message_subscribers(self, which_port)

taggedAccessCode_sptr_swigregister = _lets_test_some_stuff_swig.taggedAccessCode_sptr_swigregister
taggedAccessCode_sptr_swigregister(taggedAccessCode_sptr)


taggedAccessCode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
taggedAccessCode = taggedAccessCode.make;

class taggedPacketGate(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """
        make(std::string const & tagName) -> taggedPacketGate_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedPacketGate.

        To avoid accidental use of raw pointers, lets_test_some_stuff::taggedPacketGate's constructor is in a private implementation class. lets_test_some_stuff::taggedPacketGate::make is the public interface for creating new instances.

        Params: (tagName)
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedPacketGate
    __del__ = lambda self: None
taggedPacketGate_swigregister = _lets_test_some_stuff_swig.taggedPacketGate_swigregister
taggedPacketGate_swigregister(taggedPacketGate)

def taggedPacketGate_make(*args, **kwargs):
    """
    taggedPacketGate_make(std::string const & tagName) -> taggedPacketGate_sptr

    Return a shared_ptr to a new instance of lets_test_some_stuff::taggedPacketGate.

    To avoid accidental use of raw pointers, lets_test_some_stuff::taggedPacketGate's constructor is in a private implementation class. lets_test_some_stuff::taggedPacketGate::make is the public interface for creating new instances.

    Params: (tagName)
    """
    return _lets_test_some_stuff_swig.taggedPacketGate_make(*args, **kwargs)

class taggedPacketGate_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lets_test_some_stuff::taggedPacketGate)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedPacketGate)> self) -> taggedPacketGate_sptr
        __init__(boost::shared_ptr<(gr::lets_test_some_stuff::taggedPacketGate)> self, taggedPacketGate p) -> taggedPacketGate_sptr
        """
        this = _lets_test_some_stuff_swig.new_taggedPacketGate_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(taggedPacketGate_sptr self) -> taggedPacketGate"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr___deref__(self)

    __swig_destroy__ = _lets_test_some_stuff_swig.delete_taggedPacketGate_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """
        make(taggedPacketGate_sptr self, std::string const & tagName) -> taggedPacketGate_sptr

        Return a shared_ptr to a new instance of lets_test_some_stuff::taggedPacketGate.

        To avoid accidental use of raw pointers, lets_test_some_stuff::taggedPacketGate's constructor is in a private implementation class. lets_test_some_stuff::taggedPacketGate::make is the public interface for creating new instances.

        Params: (tagName)
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(taggedPacketGate_sptr self) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(taggedPacketGate_sptr self, int which, int delay)
        declare_sample_delay(taggedPacketGate_sptr self, unsigned int delay)
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(taggedPacketGate_sptr self, int which) -> unsigned int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(taggedPacketGate_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(taggedPacketGate_sptr self) -> double"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_relative_rate(self)


    def start(self):
        """start(taggedPacketGate_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_start(self)


    def stop(self):
        """stop(taggedPacketGate_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(taggedPacketGate_sptr self, unsigned int which_input) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(taggedPacketGate_sptr self, unsigned int which_output) -> uint64_t"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(taggedPacketGate_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(taggedPacketGate_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(taggedPacketGate_sptr self)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(taggedPacketGate_sptr self) -> bool"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(taggedPacketGate_sptr self, int m)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(taggedPacketGate_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(taggedPacketGate_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(taggedPacketGate_sptr self, long max_output_buffer)
        set_max_output_buffer(taggedPacketGate_sptr self, int port, long max_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(taggedPacketGate_sptr self, int i) -> long"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(taggedPacketGate_sptr self, long min_output_buffer)
        set_min_output_buffer(taggedPacketGate_sptr self, int port, long min_output_buffer)
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(taggedPacketGate_sptr self, int which) -> float
        pc_input_buffers_full(taggedPacketGate_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(taggedPacketGate_sptr self, int which) -> float
        pc_input_buffers_full_avg(taggedPacketGate_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(taggedPacketGate_sptr self, int which) -> float
        pc_input_buffers_full_var(taggedPacketGate_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(taggedPacketGate_sptr self, int which) -> float
        pc_output_buffers_full(taggedPacketGate_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(taggedPacketGate_sptr self, int which) -> float
        pc_output_buffers_full_avg(taggedPacketGate_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(taggedPacketGate_sptr self, int which) -> float
        pc_output_buffers_full_var(taggedPacketGate_sptr self) -> pmt_vector_float
        """
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(taggedPacketGate_sptr self) -> float"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(taggedPacketGate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(taggedPacketGate_sptr self)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(taggedPacketGate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(taggedPacketGate_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(taggedPacketGate_sptr self) -> int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(taggedPacketGate_sptr self, int priority) -> int"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(taggedPacketGate_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_name(self)


    def symbol_name(self):
        """symbol_name(taggedPacketGate_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(taggedPacketGate_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(taggedPacketGate_sptr self) -> io_signature_sptr"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(taggedPacketGate_sptr self) -> long"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(taggedPacketGate_sptr self) -> basic_block_sptr"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(taggedPacketGate_sptr self, int ninputs, int noutputs) -> bool"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(taggedPacketGate_sptr self) -> std::string"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(taggedPacketGate_sptr self, std::string name)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(taggedPacketGate_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(taggedPacketGate_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(taggedPacketGate_sptr self) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(taggedPacketGate_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lets_test_some_stuff_swig.taggedPacketGate_sptr_message_subscribers(self, which_port)

taggedPacketGate_sptr_swigregister = _lets_test_some_stuff_swig.taggedPacketGate_sptr_swigregister
taggedPacketGate_sptr_swigregister(taggedPacketGate_sptr)


taggedPacketGate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
taggedPacketGate = taggedPacketGate.make;



